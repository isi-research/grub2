Index: include/grub/efi/efi.h
===================================================================
--- include/grub/efi/efi.h	(revision 161361)
+++ include/grub/efi/efi.h	(revision 194777)
@@ -73,6 +73,7 @@
 				     const grub_efi_guid_t *guid,
 				     void *data,
 				     grub_size_t datasize);
+grub_efi_boolean_t EXPORT_FUNC (grub_efi_secure_boot) (void);
 int
 EXPORT_FUNC (grub_efi_compare_device_paths) (const grub_efi_device_path_t *dp1,
 					     const grub_efi_device_path_t *dp2);
Index: include/grub/lib/crc.h
===================================================================
--- include/grub/lib/crc.h	(revision 161361)
+++ include/grub/lib/crc.h	(revision 194777)
@@ -21,5 +21,6 @@
 #define GRUB_CRC_H	1
 
 grub_uint32_t grub_getcrc32c (grub_uint32_t crc, const void *buf, int size);
+grub_uint16_t grub_getcrc16 (grub_uint16_t crc, const void *buf, int size);
 
 #endif /* ! GRUB_CRC_H */
Index: grub-core/kern/dl.c
===================================================================
--- grub-core/kern/dl.c	(revision 161361)
+++ grub-core/kern/dl.c	(revision 194777)
@@ -38,6 +38,10 @@
 #define GRUB_MODULES_MACHINE_READONLY
 #endif
 
+#ifdef GRUB_MACHINE_EFI
+#include <grub/efi/efi.h>
+#endif
+
 
 
 #pragma GCC diagnostic ignored "-Wcast-align"
@@ -686,6 +690,15 @@
   void *core = 0;
   grub_dl_t mod = 0;
 
+#ifdef GRUB_MACHINE_EFI
+  if (grub_efi_secure_boot ())
+    {
+      grub_error (GRUB_ERR_ACCESS_DENIED,
+		  "Secure Boot forbids loading module from %s", filename);
+      return 0;
+    }
+#endif
+
   grub_boot_time ("Loading module %s", filename);
 
   file = grub_file_open (filename);
Index: grub-core/kern/efi/efi.c
===================================================================
--- grub-core/kern/efi/efi.c	(revision 161361)
+++ grub-core/kern/efi/efi.c	(revision 194777)
@@ -264,6 +264,34 @@
   return NULL;
 }
 
+grub_efi_boolean_t
+grub_efi_secure_boot (void)
+{
+  grub_efi_guid_t efi_var_guid = GRUB_EFI_GLOBAL_VARIABLE_GUID;
+  grub_size_t datasize;
+  char *secure_boot = NULL;
+  char *setup_mode = NULL;
+  grub_efi_boolean_t ret = 0;
+
+  secure_boot = grub_efi_get_variable ("SecureBoot", &efi_var_guid, &datasize);
+
+  if (datasize != 1 || !secure_boot)
+    goto out;
+
+  setup_mode = grub_efi_get_variable ("SetupMode", &efi_var_guid, &datasize);
+
+  if (datasize != 1 || !setup_mode)
+    goto out;
+
+  if (*secure_boot && !*setup_mode)
+    ret = 1;
+
+ out:
+  grub_free (secure_boot);
+  grub_free (setup_mode);
+  return ret;
+}
+
 #pragma GCC diagnostic ignored "-Wcast-align"
 
 /* Search the mods section from the PE32/PE32+ image. This code uses
Index: grub-core/Makefile.core.def
===================================================================
--- grub-core/Makefile.core.def	(revision 161361)
+++ grub-core/Makefile.core.def	(revision 194777)
@@ -2352,3 +2352,22 @@
   common = loader/i386/xen_file64.c;
   extra_dist = loader/i386/xen_fileXX.c;
 };
+
+module = {
+  name = isimath;
+  common = isi/isimath.c;
+};
+
Index: grub-core/lib/crc.c
===================================================================
--- grub-core/lib/crc.c	(revision 161361)
+++ grub-core/lib/crc.c	(revision 194777)
@@ -22,6 +22,76 @@
 
 static grub_uint32_t crc32c_table [256];
 
+static const grub_uint8_t crc16_table_low[] = {
+
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40,
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41,
+    0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 
+    0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40 };
+
+static const grub_uint8_t crc16_table_high[] = {
+
+    0x00, 0xc0, 0xc1, 0x01, 0xc3, 0x03, 0x02, 0xc2, 
+    0xc6, 0x06, 0x07, 0xc7, 0x05, 0xc5, 0xc4, 0x04,
+    0xcc, 0x0c, 0x0d, 0xcd, 0x0f, 0xcf, 0xce, 0x0e, 
+    0x0a, 0xca, 0xcb, 0x0b, 0xc9, 0x09, 0x08, 0xc8,
+    0xd8, 0x18, 0x19, 0xd9, 0x1b, 0xdb, 0xda, 0x1a, 
+    0x1e, 0xde, 0xdf, 0x1f, 0xdd, 0x1d, 0x1c, 0xdc,
+    0x14, 0xd4, 0xd5, 0x15, 0xd7, 0x17, 0x16, 0xd6, 
+    0xd2, 0x12, 0x13, 0xd3, 0x11, 0xd1, 0xd0, 0x10,
+    0xf0, 0x30, 0x31, 0xf1, 0x33, 0xf3, 0xf2, 0x32, 
+    0x36, 0xf6, 0xf7, 0x37, 0xf5, 0x35, 0x34, 0xf4,
+    0x3c, 0xfc, 0xfd, 0x3d, 0xff, 0x3f, 0x3e, 0xfe, 
+    0xfa, 0x3a, 0x3b, 0xfb, 0x39, 0xf9, 0xf8, 0x38,
+    0x28, 0xe8, 0xe9, 0x29, 0xeb, 0x2b, 0x2a, 0xea, 
+    0xee, 0x2e, 0x2f, 0xef, 0x2d, 0xed, 0xec, 0x2c,
+    0xe4, 0x24, 0x25, 0xe5, 0x27, 0xe7, 0xe6, 0x26, 
+    0x22, 0xe2, 0xe3, 0x23, 0xe1, 0x21, 0x20, 0xe0,
+    0xa0, 0x60, 0x61, 0xa1, 0x63, 0xa3, 0xa2, 0x62, 
+    0x66, 0xa6, 0xa7, 0x67, 0xa5, 0x65, 0x64, 0xa4,
+    0x6c, 0xac, 0xad, 0x6d, 0xaf, 0x6f, 0x6e, 0xae, 
+    0xaa, 0x6a, 0x6b, 0xab, 0x69, 0xa9, 0xa8, 0x68,
+    0x78, 0xb8, 0xb9, 0x79, 0xbb, 0x7b, 0x7a, 0xba, 
+    0xbe, 0x7e, 0x7f, 0xbf, 0x7d, 0xbd, 0xbc, 0x7c,
+    0xb4, 0x74, 0x75, 0xb5, 0x77, 0xb7, 0xb6, 0x76, 
+    0x72, 0xb2, 0xb3, 0x73, 0xb1, 0x71, 0x70, 0xb0,
+    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 
+    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
+    0x9c, 0x5c, 0x5d, 0x9d, 0x5f, 0x9f, 0x9e, 0x5e, 
+    0x5a, 0x9a, 0x9b, 0x5b, 0x99, 0x59, 0x58, 0x98,
+    0x88, 0x48, 0x49, 0x89, 0x4b, 0x8b, 0x8a, 0x4a, 
+    0x4e, 0x8e, 0x8f, 0x4f, 0x8d, 0x4d, 0x4c, 0x8c,
+    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 
+    0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };
+
 /* Helper for init_crc32c_table.  */
 static grub_uint32_t
 reflect (grub_uint32_t ref, int len)
@@ -74,3 +144,28 @@
 
   return crc ^ 0xffffffff;
 }
+
+grub_uint16_t 
+grub_getcrc16  (grub_uint16_t crc, const void *buf, int size)
+{
+    int i;
+    grub_uint16_t temp;
+    const grub_uint8_t *data = buf;
+
+    for (i = 0; i < size; i++)
+    {
+        temp = (crc & 0xff) ^ (grub_uint16_t)(*data);
+
+        crc = (crc16_table_low[temp] ^ (crc >> 8)) +
+                     (crc16_table_high[temp] << 8);
+
+        data++;
+    }
+
+    return crc;
+}
+
+
+
+
+
Index: grub-core/isi/isimath.c
===================================================================
--- grub-core/isi/isimath.c	(revision 0)
+++ grub-core/isi/isimath.c	(revision 194777)
@@ -0,0 +1,135 @@
+/* hello.c - test module for dynamic loading */
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 2003,2007  Free Software Foundation, Inc.
+ *  Copyright (C) 2003  NIIBE Yutaka <gniibe@m17n.org>
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <grub/types.h>
+#include <grub/misc.h>
+#include <grub/mm.h>
+#include <grub/err.h>
+#include <grub/dl.h>
+#include <grub/env.h>
+#include <grub/extcmd.h>
+#include <grub/i18n.h>
+
+#define REPLY_BUFFER_SIZE   16
+
+GRUB_MOD_LICENSE ("GPLv3+");
+
+typedef enum _isi_math_operation
+{
+    ISI_MATH_OP_NONE = 0,
+    ISI_MATH_OP_INC,
+    ISI_MATH_OP_DEC, 
+    ISI_MATH_OP_COUNT
+} isi_math_op_t;
+
+static const struct grub_arg_option options[] =
+{
+    {"set", 's', 0, N_("set"), N_("SET"), ARG_TYPE_STRING},
+    {0, 0, 0, 0, 0, 0}
+};
+
+static grub_err_t grub_cmd_isi_math(grub_extcmd_context_t ctxt, int argc, char **args )
+{
+    int set_env_var = 0;
+    struct grub_arg_list *state = ctxt->state;
+    isi_math_op_t math_op = ISI_MATH_OP_NONE;
+    long input_arg;
+    char reply[REPLY_BUFFER_SIZE];
+
+    if( state[0].set )
+    {
+        set_env_var = 1;
+    }
+
+    if( 0 == grub_strcmp(ctxt->extcmd->cmd->name, "inc") )
+    {
+        math_op = ISI_MATH_OP_INC;
+
+    }
+    else if( 0 ==  grub_strcmp(ctxt->extcmd->cmd->name, "dec") )
+    {
+        math_op = ISI_MATH_OP_DEC;
+    }
+    else
+    {
+        return grub_error(GRUB_ERR_BUG, N_("BUG: DID NOT RECOGNIZE COMMAND NAME"));
+    }
+
+    // validate the arg count
+    switch(math_op)
+    {
+        case ISI_MATH_OP_INC:
+        case ISI_MATH_OP_DEC:
+            if (1 != argc)
+            {
+                return grub_error(GRUB_ERR_BAD_ARGUMENT, N_("EXPECTED A SINGLE ARG"));
+            }
+            break;
+
+        default:
+            return grub_error(GRUB_ERR_BUG, N_("BUG: INVALID ISI MATH OP TYPE"));
+
+    }
+
+    input_arg = grub_strtol(args[0], NULL, 10);
+
+    switch(math_op)
+    {
+        case ISI_MATH_OP_INC:
+            input_arg++;
+            break;
+        case ISI_MATH_OP_DEC:
+            input_arg--;
+            break;
+        default:
+            return grub_error(GRUB_ERR_BUG, N_("BUG: INVALID ISI MATH OP TYPE"));
+    }
+
+    if( set_env_var )
+    {
+        // set the env var w/ the new value
+        grub_snprintf( reply, REPLY_BUFFER_SIZE, "%ld", input_arg );
+        grub_env_set( state[0].arg, reply );
+    }
+    else
+    {
+        grub_printf("%ld\n", input_arg);
+    }
+
+    return GRUB_ERR_NONE;
+}
+
+static grub_extcmd_t cmd_inc;
+static grub_extcmd_t cmd_dec;
+
+GRUB_MOD_INIT(hello)
+{
+    cmd_inc = grub_register_extcmd ("inc", grub_cmd_isi_math, 0, 0,
+			      N_("increment the input number"), options);
+
+    cmd_dec = grub_register_extcmd ("dec", grub_cmd_isi_math, 0, 0,
+			      N_("decrement the input number"), options);
+}
+
+GRUB_MOD_FINI(hello)
+{
+    grub_unregister_extcmd (cmd_inc);
+    grub_unregister_extcmd (cmd_dec);
+}
Index: grub-core/isi/isi_key.h
===================================================================
--- grub-core/isi/isi_key.h	(revision 0)
+++ grub-core/isi/isi_key.h	(revision 194777)
@@ -0,0 +1,12 @@
+
+#ifndef _ISI_KEY_H_
+#define _ISI_KEY_H_
+
+#define ISI_MODULUS_LENGTH  512
+#define ISI_EXPONENT_LENGTH 4
+
+extern unsigned char isi_modulus[];
+
+extern unsigned char isi_exponent[];
+
+#endif
Index: grub-core/isi/isi_key.c
===================================================================
--- grub-core/isi/isi_key.c	(revision 0)
+++ grub-core/isi/isi_key.c	(revision 194777)
@@ -0,0 +1,44 @@
+
+unsigned char isi_modulus[] = 
+{
+
+0xf3,0x78,0x95,0xe5,0x6a,0x96,0x93,0x77,0x93,0xbc,0xe2,0xbc,0xd1,0x6e,
+0x53,0x54,0x0a,0xb4,0x78,0xe8,0xd0,0x23,0x7b,0x01,0xf6,0xa6,0x22,0x2c,0x66,
+0x41,0x78,0xe4,0x56,0xe0,0x90,0x3f,0xab,0x53,0xd9,0x6f,0x2b,0x77,0x9a,0xe7,
+0x34,0x31,0xc1,0x66,0x9c,0x26,0x2a,0x5d,0xaf,0x61,0x37,0x09,0x70,0xe7,0x99,
+0xb4,0xc8,0xa0,0xd0,0x02,0x29,0xc4,0xca,0xe2,0x60,0xb5,0x21,0x44,0x6c,0x5e,
+0x8d,0xb1,0x71,0x22,0xbb,0x5b,0x9e,0x4f,0x9b,0x48,0x0e,0xe2,0xef,0x91,0x9d,
+0x89,0x69,0x11,0xb0,0x48,0xa6,0x6a,0xfc,0x34,0x8c,0x77,0x45,0x6b,0x60,0x8e,
+0x48,0x82,0xf6,0x43,0x62,0xa1,0xc2,0xbe,0x54,0x17,0x98,0x49,0x4b,0x05,0x50,
+0xc6,0xb5,0x66,0xac,0x74,0xdb,0xf7,0x47,0x33,0xb1,0xaa,0x83,0x3f,0xe1,0x6b,
+0x48,0x35,0x84,0xbc,0x3c,0xa3,0x3e,0xd4,0x8d,0xc2,0x2e,0xd1,0xa5,0x4e,0x8a,
+0x03,0x35,0x1c,0x7e,0x43,0xc0,0x53,0x64,0x3e,0xfa,0xdc,0xb0,0x8f,0x65,0x4e,
+0x4a,0x2a,0x71,0xe3,0x46,0x5b,0xa3,0x69,0x3d,0x13,0x3c,0xdd,0xc4,0x38,0x0e,
+0xa6,0x98,0x40,0x42,0x29,0x53,0x42,0xba,0x6e,0xfe,0xc6,0xb6,0x46,0x3b,0x12,
+0xae,0xc1,0x8b,0x27,0x34,0x2e,0x52,0x56,0xd6,0x36,0x7b,0xa5,0x12,0xcd,0xbe,
+0x61,0xec,0x1f,0x25,0xd7,0x4a,0xbd,0x7d,0x28,0xe1,0xe1,0x2f,0x3a,0x2b,0xb5,
+0xa7,0x8b,0xdb,0x02,0xcc,0xd2,0xd0,0xcf,0xb9,0x5a,0xdb,0x06,0x92,0xd8,0xa2,
+0xb6,0x12,0xff,0x1a,0x4a,0x68,0x35,0x1a,0x8a,0x7a,0x4f,0xbd,0x2e,0xe6,0x0a,
+0x53,0x1b,0x00,0x8e,0x67,0x42,0x76,0x46,0x1c,0x1b,0x8b,0xd7,0xb0,0xe8,0x97,
+0x21,0xa1,0x71,0x1c,0xe2,0x40,0xb6,0xbe,0xaa,0x3d,0xb6,0xbc,0xbf,0x36,0x96,
+0x12,0xc0,0x02,0xbb,0x30,0xb7,0x7f,0xba,0x53,0xf5,0xd5,0xc4,0x2e,0xec,0xf3,
+0xf5,0x0d,0xb2,0xd2,0xce,0x83,0x91,0xef,0x8f,0xe7,0x2e,0xaa,0xe4,0x48,0x42,
+0xfa,0xa2,0xce,0xca,0x73,0x7e,0x83,0x31,0x07,0x8f,0xe7,0x30,0xa8,0x28,0xfa,
+0x1e,0x86,0xd8,0x2d,0xa4,0x90,0x34,0xdd,0x71,0x30,0x0e,0x3b,0x97,0x21,0xa1,
+0xcf,0x99,0xdf,0x28,0x55,0x43,0xa0,0x4f,0x8f,0xae,0x0e,0xdc,0x4a,0x1f,0xf9,
+0xc4,0xab,0x21,0x5c,0xc4,0xf1,0xb4,0xbd,0x65,0x5d,0xaf,0xf0,0x26,0xb2,0x48,
+0x02,0x40,0x6f,0x96,0xc9,0x97,0xd1,0xf5,0x8e,0x48,0xaa,0xf9,0x78,0xf4,0x2a,
+0x71,0xbc,0x35,0x31,0x4a,0xfb,0xa2,0x9f,0x0d,0xe8,0x4b,0xe3,0x1a,0x50,0xe9,
+0x35,0x8d,0x91,0xd6,0x56,0x16,0x62,0x0e,0x0a,0x7f,0x86,0x04,0xeb,0x66,0x3a,
+0x0e,0x41,0xad,0x2b,0x89,0x72,0x4b,0x97,0x22,0x22,0xef,0xbb,0xe4,0xde,0x3e,
+0xac,0x1d,0x10,0x9f,0x68,0xeb,0x4a,0x4b,0x39,0x7c,0x62,0xa3,0x19,0x44,0x40,
+0xe5,0xf1,0xd6,0xd0,0xbd,0x9a,0xb1,0xb9,0xe1,0xc7,0x46,0x0b,0xc1,0x4b,0x91,
+0xc6,0x92,0x04,0xf7,0xd1,0x57,0xa0,0xe2,0xb2,0xf6,0xe8,0x9f,0x5a,0xd7,0x0e,
+0xea,0x68,0x9e,0x09,0x37,0x52,0x01,0xd7,0xed,0xd0,0x61,0xe6,0x85,0xe5,0x80,
+0x62,0x9b,0xc5,0xd7,0xaa,0x24,0x42,0x41,0x70,0x62,0x69,0xe4,0x26,0x03,0xb4,
+0xa8,0x2a,0xff
+
+};
+
+// stored MSB first
+unsigned char isi_exponent[] = { 0x00, 0x01, 0x00, 0x01 };
Index: grub-core/loader/i386/linux.c
===================================================================
--- grub-core/loader/i386/linux.c	(revision 161361)
+++ grub-core/loader/i386/linux.c	(revision 194777)
@@ -687,6 +687,8 @@
   int relocatable;
   grub_uint64_t preferred_address = GRUB_LINUX_BZIMAGE_ADDR;
 
+  grub_puts("grub_cmd_linux: loader/i386/linux.c"); 
+
   grub_dl_ref (my_mod);
 
   if (argc == 0)
@@ -847,8 +849,10 @@
       ((grub_addr_t) grub_efi_system_table >> 32) != 0)
     return grub_error(GRUB_ERR_BAD_OS,
 		      "kernel does not support 64-bit addressing");
+  grub_puts("GRUB_MACHINE_EFI and __x86_64__ are both defined");
 #endif
-
+  
+  grub_printf("grub_cmd_linux: linux_params.version = %d\n", grub_le_to_cpu16 (linux_params.version));
   if (grub_le_to_cpu16 (linux_params.version) >= 0x0208)
     {
       linux_params.v0208.efi_signature = GRUB_LINUX_EFI_SIGNATURE;
Index: grub-core/loader/i386/pc/linux.c
===================================================================
--- grub-core/loader/i386/pc/linux.c	(revision 161361)
+++ grub-core/loader/i386/pc/linux.c	(revision 194777)
@@ -131,6 +131,8 @@
   grub_addr_t grub_linux_prot_target;
   grub_err_t err;
 
+  grub_puts(  "grub_cmd_linux: loader/i386/pc/linux.c");
+
   grub_dl_ref (my_mod);
 
   if (argc == 0)
Index: grub-core/loader/ia64/efi/linux.c
===================================================================
--- grub-core/loader/ia64/efi/linux.c	(revision 161361)
+++ grub-core/loader/ia64/efi/linux.c	(revision 194777)
@@ -491,6 +491,8 @@
   grub_ssize_t len;
   int i;
 
+  grub_puts("grub_cmd_linux: loader/ia64/efi/linux.c");
+
   grub_dl_ref (my_mod);
 
   grub_loader_unset ();
Index: grub-core/loader/linux.c
===================================================================
--- grub-core/loader/linux.c	(revision 161361)
+++ grub-core/loader/linux.c	(revision 194777)
@@ -244,6 +244,65 @@
   initrd_ctx->components = 0;
 }
 
+typedef struct {
+    grub_off_t size;
+    grub_off_t bytes_read;
+    int last_progress;
+} progress_data_t;
+static progress_data_t initrd_progress_data;
+
+static void init_progress_data(progress_data_t* progress_data, grub_off_t size)
+{
+    if(progress_data)
+    {
+        progress_data->size = size;
+        progress_data->bytes_read = 0;
+        // this is so that progress 0 will show up once.
+        progress_data->last_progress = -1;
+    }
+}
+
+#define PROGRESS_TICK       5
+#define NEWLINE_TICK        50
+
+static void initrd_read_hook(grub_disk_addr_t sector,
+				       unsigned offset, unsigned length,
+				       void *data)
+{
+    progress_data_t* progress_data; 
+    int progress ;
+
+    // sanitize the data
+    if(!data)
+    {
+        return;
+    }
+
+    progress_data = (progress_data_t*)(data);
+
+    // just to satisy the grub compiler, which I assume has some 
+    // sort of static analyzer
+    sector = sector;
+    offset = offset;
+
+    progress_data->bytes_read += length;
+
+    progress = (int)((100 * progress_data->bytes_read)/(progress_data->size));
+
+    // this should be safe.  grub_off_t is a uint64
+    if((0 == (progress % PROGRESS_TICK)) && (progress != progress_data->last_progress))
+    {
+        progress_data->last_progress = progress;
+
+        grub_printf(".%02d", progress);
+
+        if( progress && (0 == (progress % NEWLINE_TICK)))
+        {
+            grub_printf("\n");
+        }
+    }
+}
+
 grub_err_t
 grub_initrd_load (struct grub_linux_initrd_context *initrd_ctx,
 		  char *argv[], void *target)
@@ -279,6 +338,12 @@
 	}
 
       cursize = initrd_ctx->components[i].size;
+
+      init_progress_data(&initrd_progress_data, cursize);
+      initrd_ctx->components[i].file->read_hook = initrd_read_hook;
+
+      initrd_ctx->components[i].file->read_hook_data = (void*)(&initrd_progress_data);
+
       if (grub_file_read (initrd_ctx->components[i].file, ptr, cursize)
 	  != cursize)
 	{
